/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/aBfNNuvoWTz
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, ReactNode } from "react"
import { Button } from "@/components/ui/button"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Checkbox } from "@/components/ui/checkbox"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"

interface Character {
  id: number;
  name: string;
  description: string;
  personality: string;
}

export function Component() {
  const [characters, setCharacters] = useState([
    {
      id: 1,
      name: "Eliza Brightwind",
      description: "A brave and adventurous explorer",
      personality: "Curious, determined, and compassionate",
    },
    {
      id: 2,
      name: "Theron Ironforge",
      description: "A gruff but loyal dwarven warrior",
      personality: "Stubborn, protective, and with a heart of gold",
    },
    {
      id: 3,
      name: "Nymeria Shadowleaf",
      description: "A mysterious elven archer with a troubled past",
      personality: "Aloof, skilled, and haunted by her history",
    },
  ])
  const [showDialog, setShowDialog] = useState(false)
  const [editingCharacter, setEditingCharacter] = useState<Character | null>(null)
  const [story, setStory] = useState("")
  const [characterSummaries, setCharacterSummaries] = useState({})
  const [selectedCharacters, setSelectedCharacters] = useState<Character[]>([])
  const handleAddCharacter = () => {
    setEditingCharacter({
      id: Date.now(),
      name: "",
      description: "",
      personality: "",
    })
    setShowDialog(true)
  }
  const handleEditCharacter = (character: Character) => {
    setEditingCharacter(character)
    setShowDialog(true)
  }
  const handleDeleteCharacter = (id: number) => {
    setCharacters(characters.filter((c) => c.id !== id))
  }
  const handleSaveCharacter = (character: Character) => {
    if (editingCharacter?.id) {
      setCharacters(characters.map((c) => (c.id === editingCharacter.id ? character : c)))
    } else {
      setCharacters([...characters, character])
    }
    setEditingCharacter(null)
    setShowDialog(false)
  }
  const handleGenerateStory = () => {
    let story = "Once upon a time, in a world of adventure and wonder, a group of unlikely heroes came together:\n\n"
    let characterSummaries: Record<number, string> = {}
    selectedCharacters.forEach((character) => {
      story += `- ${character.name}, ${character.description}, with a ${character.personality} personality.\n`
      characterSummaries[character.id] = `${character.name} is ${character.description} with a ${character.personality} personality.`
    })
    story += "\nTheir journey began when..."
    setStory(story)
    setCharacterSummaries(characterSummaries)
  }
  const handleCharacterSelection = (character: Character) => {
    if (selectedCharacters.includes(character)) {
      setSelectedCharacters(selectedCharacters.filter((c) => c.id !== character.id))
    } else {
      setSelectedCharacters([...selectedCharacters, character])
    }
  }
  return (
    <div className="p-6 bg-background text-foreground">
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold">Character Manager</h1>
        <Button onClick={handleAddCharacter}>Add Character</Button>
      </div>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Select</TableHead>
            <TableHead>Name</TableHead>
            <TableHead>Description</TableHead>
            <TableHead>Personality</TableHead>
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {characters.map((character) => (
            <TableRow key={character.id}>
              <TableCell>
                <Checkbox
                  checked={selectedCharacters.includes(character)}
                  onCheckedChange={() => handleCharacterSelection(character)}
                />
              </TableCell>
              <TableCell>{character.name}</TableCell>
              <TableCell>{character.description}</TableCell>
              <TableCell>{character.personality}</TableCell>
              <TableCell>
                <div className="flex gap-2">
                  <Button variant="outline" size="sm" onClick={() => handleEditCharacter(character)}>
                    Edit
                  </Button>
                  <Button variant="destructive" size="sm" onClick={() => handleDeleteCharacter(character.id)}>
                    Delete
                  </Button>
                </div>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
      {showDialog && (
        <Dialog open={showDialog} onOpenChange={setShowDialog}>
          <DialogContent className="p-6">
            <DialogHeader>
              <DialogTitle>{editingCharacter?.id ? "Edit Character" : "Add New Character"}</DialogTitle>
            </DialogHeader>
            <div className="grid gap-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="name">Name</Label>
                  <Input
                    id="name"
                    value={editingCharacter?.name ?? ''}
                    onChange={(e) =>
                      setEditingCharacter({
                        ...editingCharacter!,
                        name: e.target.value,
                      })
                    }
                  />
                </div>
                <div>
                  <Label htmlFor="description">Description</Label>
                  <Input
                    id="description"
                    value={editingCharacter?.description ?? ''}
                    onChange={(e) =>
                      setEditingCharacter({
                        ...editingCharacter!,
                        description: e.target.value,
                      })
                    }
                  />
                </div>
              </div>
              <div>
                <Label htmlFor="personality">Personality</Label>
                <Textarea
                  id="personality"
                  value={editingCharacter?.personality ?? ''}
                  onChange={(e) =>
                    setEditingCharacter({
                      ...editingCharacter!,
                      personality: e.target.value,
                    })
                  }
                />
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowDialog(false)}>
                Cancel
              </Button>
              <Button onClick={() => handleSaveCharacter(editingCharacter as Character)}>Save</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}
      <div className="mt-8">
        <Button onClick={handleGenerateStory}>Generate Story</Button>
        {story && (
          <div className="mt-4">
            <h2 className="text-xl font-bold mb-2">The Story</h2>
            <p>{story}</p>
            <h2 className="text-xl font-bold mt-4 mb-2">Character Summaries</h2>
            <div className="grid gap-2">
              {Object.values(characterSummaries).map((summary, index) => (
                <div key={index} className="bg-muted p-2 rounded">
                  {summary as ReactNode}
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
